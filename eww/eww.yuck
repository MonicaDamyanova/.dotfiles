(defpoll volume :interval "1s" "zsh ~/.config/eww/scripts/get-volume")
(defpoll battery :interval "5s" "zsh ~/.config/eww/scripts/get-battery --bat")
(defpoll time :interval "1s" "date '+%H:%M:%S %b %d, %Y'")

(defwindow topbar 
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "20px"
                               :width "90%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
	   :exclusive true
	   (bar)
)

(defwidget bar []
  (box :orientation "h"
    (workspaces)
    (window_w)
    (sidestuff)
  )
)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label ""
            :value volume
            :onchange "")
    (metric :label ""
            :value battery
            :onchange "")
    (metric :label ""
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label ""
            :value {round((1 - (EWW_DISK["/home"].free / EWW_DISK["/home"].total)) * 100, 0)}
            :onchange "")
    time))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "${music}" : "nuthin"}))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(deflisten workspaces :initial "[]" "zsh ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "zsh ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "zsh ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.windows > 0 ? "" : ""}" :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""}" )
            )
          )
        )
      )
    )
  )

(deflisten window :initial "..." "zsh ~/.config/eww/scripts/get-window-title")
(defwidget window_w []
  (box
    (label :text "${window}"
    )
  )
)
